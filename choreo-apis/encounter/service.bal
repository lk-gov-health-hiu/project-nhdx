// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.

// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import ballerina/http;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhirr4;
import ballerinax/health.fhir.r4.lkcore010;
import ballerinax/health.fhir.r4.parser as fhirParser;
import ballerina/log;

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Encounter r4:Encounter|<other_Encounter_Profile>;
public type Encounter lkcore010:TargetFacilityEncounter;

configurable string base = ?;
configurable string apiKey = ?;
configurable string certFile = ?;
configurable string basePath = "/mohfhirproxyapi/1.0.0";

final http:Client encounterApiClient = check new (base,
    secureSocket = {
        cert: certFile
    }
);

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service / on new fhirr4:Listener(9090, apiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Encounter/[string id] (r4:FHIRContext fhirContext) returns Encounter|r4:FHIRError {
        string path = string `${basePath}/Encounter/${id}`;
        //TODO: call the MoH proxy API directly once the DNS issue is resolved.
        http:Response|http:ClientError response = encounterApiClient->get(path, headers = {
            apikey: apiKey
        });
        if (response is http:Response) {
            json|http:ClientError jsonPayload = response.getJsonPayload();
            if jsonPayload is json {
                do {
                    if jsonPayload.resourceType == "OperationOutcome" {
                        return check fhirParser:parse(jsonPayload).ensureType();
                    }
                    anydata encounter = check fhirParser:parse(jsonPayload);
                    return check encounter.cloneWithType(lkcore010:TargetFacilityEncounter);
                } on fail var e {
                    log:printError("Error occurred while parsing the response: ", e);
                    return r4:createFHIRError("Error occurred while parsing the response", r4:ERROR, r4:PROCESSING, cause = e, httpStatusCode = http:STATUS_UNPROCESSABLE_ENTITY);
                }
            } else {
                //handle error
                log:printError("Error occurred while accessing response payload: ", jsonPayload);
                return r4:createFHIRError("Invalid payload format", r4:ERROR, r4:PROCESSING, httpStatusCode = http:STATUS_UNPROCESSABLE_ENTITY);
            }
        } else {
            //handle error
            log:printError("Error occurred while calling the API: ", response);
            return r4:createFHIRError("Error occurred while calling the API", r4:ERROR, r4:PROCESSING, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Encounter/[string id]/_history/[string vid] (r4:FHIRContext fhirContext) returns Encounter|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Encounter (r4:FHIRContext fhirContext) returns r4:Bundle|r4:FHIRError {
        r4:FHIRRequest? fhirRequest = fhirContext.getFHIRRequest();
        map<string> queryParams = {};
        string path = string `${basePath}/Encounter`;
        if fhirRequest is r4:FHIRRequest {
            map<r4:RequestSearchParameter[] & readonly> & readonly searchParameters = fhirRequest.getSearchParameters();
            //iterate search parameters and build the query string
            if searchParameters.length() > 0 {
                path = string `${path}?`;
            }
            foreach var searchParameter in searchParameters.entries() {
                string key = searchParameter[0];
                r4:RequestSearchParameter[] values = searchParameter[1];
                foreach var value in values {
                    //TODO:need to remove this with the core level support for disable common search parameters.
                    if key == "_count" || key == "_offset" {
                        continue;
                    }
                    path = string `${path}&${key}=${value.value}`;
                    queryParams[key] = value.value;
                }
            }
        }

        http:Response|http:ClientError response = encounterApiClient->get(path, headers = {
            apikey: apiKey
        });
        if (response is http:Response) {
            json|http:ClientError jsonPayload = response.getJsonPayload();
            if jsonPayload is json {
                do {
                    return check fhirParser:parse(jsonPayload).ensureType();
                } on fail var e {
                    log:printError("Error occurred while parsing the response: ", e);
                    return r4:createFHIRError("Error occurred while parsing the response", r4:ERROR, r4:PROCESSING, cause = e, httpStatusCode = http:STATUS_UNPROCESSABLE_ENTITY);
                }
            } else {
                //handle error
                log:printError("Error occurred while accessing response payload: ", jsonPayload);
                return r4:createFHIRError("Invalid payload format", r4:ERROR, r4:PROCESSING, httpStatusCode = http:STATUS_UNPROCESSABLE_ENTITY);
            }
        } else {
            //handle error
            log:printError("Error occurred while calling the API: ", response);
            return r4:createFHIRError("Error occurred while calling the API", r4:ERROR, r4:PROCESSING, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Encounter (r4:FHIRContext fhirContext, Encounter encounter) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        string path = string `${basePath}/Encounter`;

        do {
            anydata parsedPayload = check fhirParser:parse(encounter.toJson());
            lkcore010:TargetFacilityEncounter parsedResource = check parsedPayload.cloneWithType(lkcore010:TargetFacilityEncounter);

            http:Response|http:ClientError response = encounterApiClient->post(path, message = parsedResource, 
                headers = {
                    apikey: apiKey
                }
            );

            if response !is http:Response {
                return handleError("Error occurred while calling the Create API: ", response, http:STATUS_INTERNAL_SERVER_ERROR);
            }

            json|http:ClientError jsonPayload = response.getJsonPayload();
            if !isSuccessCode(response.statusCode) {
                return handleError("Error code returned from the Create API: ",jsonPayload, http:STATUS_INTERNAL_SERVER_ERROR);
            }

            if jsonPayload !is json {
                return handleError("Error occurred while accessing response: ",jsonPayload, http:STATUS_UNPROCESSABLE_ENTITY);
            }

            do {
                if jsonPayload.resourceType == "OperationOutcome" {
                    return check fhirParser:parse(jsonPayload).ensureType();
                }
                anydata result = check fhirParser:parse(jsonPayload);
                return check result.cloneWithType(lkcore010:TargetFacilityEncounter);
            } on fail var e {
                return handleError("Error occurred while parsing the response: ",e, http:STATUS_UNPROCESSABLE_ENTITY);
            }
            
        } on fail var e {
            return handleError("Error occurred while parsing the payload: ", e, http:STATUS_UNPROCESSABLE_ENTITY);
        }
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Encounter/[string id] (r4:FHIRContext fhirContext, Encounter encounter) returns Encounter|r4:OperationOutcome|r4:FHIRError {
            string path = string `${basePath}/Encounter/${id}`;

        do {
            anydata parsedPayload = check fhirParser:parse(encounter.toJson());
            lkcore010:TargetFacilityEncounter parsedResource = check parsedPayload.cloneWithType(lkcore010:TargetFacilityEncounter);

            http:Response|http:ClientError response = encounterApiClient->put(path, message = parsedResource, 
                headers = {
                    apikey: apiKey
                }
            );

            if response !is http:Response {
                return handleError("Error occurred while calling the Update API: ", response, http:STATUS_INTERNAL_SERVER_ERROR);
            }

            json|http:ClientError jsonPayload = response.getJsonPayload();
            if !isSuccessCode(response.statusCode) {
                return handleError("Error code returned from the Update API: ",jsonPayload, http:STATUS_INTERNAL_SERVER_ERROR);
            }

            if jsonPayload !is json {
                return handleError("Error occurred while accessing response: ",jsonPayload, http:STATUS_UNPROCESSABLE_ENTITY);
            }

            do {
                if jsonPayload.resourceType == "OperationOutcome" {
                    return check fhirParser:parse(jsonPayload).ensureType();
                }
                anydata result = check fhirParser:parse(jsonPayload);
                return check result.cloneWithType(lkcore010:TargetFacilityEncounter);
            } on fail var e {
                return handleError("Error occurred while parsing the response: ",e, http:STATUS_UNPROCESSABLE_ENTITY);
            }
            
        } on fail var e {
            return handleError("Error occurred while parsing the payload: ", e, http:STATUS_UNPROCESSABLE_ENTITY);
        }
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Encounter/[string id] (r4:FHIRContext fhirContext, json patch) returns r4:Bundle|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Encounter/[string id] (r4:FHIRContext fhirContext) returns r4:Bundle|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Encounter/[string id]/_history (r4:FHIRContext fhirContext) returns r4:Bundle|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Encounter/_history (r4:FHIRContext fhirContext) returns r4:Bundle|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}
